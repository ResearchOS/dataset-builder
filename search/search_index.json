{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dataset-builder","text":"<p>Python package to build a Dataset, reading from a provided TOML file. Supported datasets are hierarchically structured data of any kind, with files split across folders. Each data file should represent one Data Object. Currently, multiple data objects per data file is not supported (see the Roadmap)</p> <p>This Dataset package supports any type of hierarchically structured data by specifying its metadata in TOML (recommended), JSON, or YAML files. It is the second tool developed for use with the ResearchOS platform (check out the first tool to generate DAG's of a data processing pipeline, dagpiler).</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>Support datasets that have multiple data objects per file (i.e. one or more CSV files).</li> <li>Support additional columns besides the data_object_hierarchy columns in the data_objects_table.</li> </ul>"},{"location":"attributes/","title":"Attributes","text":"<p>To define a dataset, there are several attributes that need to be set in the dataset's configuration file. All attributes are required unless specified otherwise.</p>"},{"location":"attributes/#data_folder_path","title":"data_folder_path","text":"<p>The absolute path to the folder containing the files in the dataset. This is the <code>data_folder</code> folder in the Folder Structure page. <pre><code>data_folder_path = \"/path/to/data_folder\"\n</code></pre></p>"},{"location":"attributes/#data_objects_hierarchy","title":"data_objects_hierarchy","text":"<p>The hierarchy of the data objects in the dataset. The column names in the data objects are used to define the hierarchy. The hierarchy is a list of dictionaries where the key is the column name and the value is the data object class. The first item is the top level data object, and each successive item is lower in the data object hierarchy. <pre><code>data_objects_hierarchy = [\n    {column_name1 = \"data_object_class1\"},\n    {column_name2 = \"data_object_class2\"},\n]\n</code></pre> For the example dataset, which consists of Subject data objects that each contain multiple Trial data objects, the hierarchy would be: <pre><code>data_objects_hierarchy = [\n    { \"Subject Name\" = \"Subject\"},\n    { \"Trial Name\" = \"Trial\"},\n]\n</code></pre></p> <p>Tip</p> <p>By convention, the data object class names are capitalized.</p>"},{"location":"attributes/#data_objects_file_paths","title":"data_objects_file_paths","text":"<p>This defines the relative path to each data objects' data file(s). The path is relative to the <code>data_folder</code> folder.  <pre><code>data_objects_file_paths = \"Subject/Trial\"\n</code></pre></p> <p>Warning</p> <p>The data object names in the file path must match the data object names in the data_objects_hierarchy exactly.</p>"},{"location":"attributes/#data_objects_table_path","title":"data_objects_table_path","text":"<p>The path to the table (csv file) that defines the data objects (example). The path can be relative to the <code>data_folder</code> folder or an absolute path.</p> <p>If the file is located at $data_folder/data_objects_table.csv, the path would be: <pre><code>data_objects_table_path = \"data_objects_table.csv\"\n</code></pre></p> <p>If the file is located outside of the <code>$data_folder</code> folder, the path would be: <pre><code>data_objects_table_path = \"/path/to/data_objects_table.csv\"\n</code></pre></p>"},{"location":"attributes/#num_header_rows","title":"num_header_rows","text":"<p>The number of rows in the data objects table that are header rows. These rows are skipped when reading the table. The first row of the table is assumed to always be the header row. If that is your only header row, then you will have: <pre><code>num_header_rows = 1\n</code></pre> If there are additional header rows below the first row, for example the first header row plus two additional rows, then you will need to set this value to the number of header rows. <pre><code># /Users/my_username/my_dataset/data_objects_table.csv\n| Subject Name | Trial Name |\n| header txt1  | header txt1|\n| header txt2  | header txt2|\n| ------------ | ---------  |\n|   Subject1   |   Trial1   |\n|   Subject1   |   Trial2   |\n|   Subject2   |   Trial1   |\n|   Subject2   |   Trial2   |\n</code></pre> <pre><code>num_header_rows = 3\n</code></pre></p>"},{"location":"attributes/#optional-other_columns","title":"(Optional) other_columns","text":"<p>For now, this attribute is not used and can be omitted. Any additional columns in the data objects table that are not part of the data objects hierarchy are ignored.</p> <p>Todo</p> <p>In the future, this attribute will be used to specify how other columns within the data objects table should be handled. If other columns contain metadata like notes, or actual data, this attribute will include them in the dataset as well.</p>"},{"location":"dataset_structure/","title":"Dataset Structure","text":"<p>After building the dataset, there are various data structures encapsulated within the dataset object. The following sections describe the structure of the dataset object and its components.</p>"},{"location":"dataset_structure/#data-objects","title":"Data Objects","text":"<p>Every entity in a dataset that data can be assigned to is called a Data Object. Each Dataset consists of one or more levels of Data Objects, structured hierarchically. </p> <p>Tip</p> <p>Data Objects are analagous to the concept of \"statistical factors\" in the design of experiments.</p> <p>The Data Object names can be any string, and this flexibility allows this package to work with datasets containing any kind of data.</p> <p>Here's a couple of examples of the data_object_hierarchy attribute for a couple example Datasets with different kinds of Data Objects. Recall that the format of the <code>data_objects_hierarchy</code> attribute is an ordered list of key-value pairs. The keys are the name of a column in the data_objects_table, and the value is the name of the Data Object level in that column.</p>"},{"location":"dataset_structure/#data-objects-example-1","title":"Data Objects Example 1","text":"<p>A marine biologist is taking measurements of various fish species in different locations. The Data Objects in this case could be structured as follows: <pre><code>data_objects_hierarchy = [\n    { \"Location (lat., long.)\" = \"Location\" },\n    { \"Fish type (Latin name)\" = \"Species\" },    \n]\n</code></pre></p> <p>Info</p> <p>Note that the column names can be any string. Optionally, they can contain additional helpful information like the units of the data to describe what the Data Object represents.</p> <pre><code>| Location (lat., long.) | Species (Latin name) |\n| ---------------------- | -------------------  |\n|       Location1        |       Species1       |\n|       Location1        |       Species2       |\n|       Location2        |       Species1       |\n|       Location2        |       Species2       |\n</code></pre> <p>Warning</p> <p>Note that in the data objects table, there are NO measurements. This table only contains the names of the Data Objects. The actual measurements are stored in the data files.</p>"},{"location":"dataset_structure/#data-objects-example-2","title":"Data Objects Example 2","text":"<p>A biomechanist is measuring how high people can jump under different conditions. The Data Objects in this case could be structured as follows: <pre><code>data_objects_hierarchy = [    \n    { \"Subject ID\" = \"Subject\" },\n    { \"Condition\" = \"Condition\" },\n    { \"Trial Name\" = \"Trial\" },\n]\n</code></pre></p>"},{"location":"dataset_structure/#data-object-trees","title":"Data Object Trees","text":"<p>The Data Objects in a dataset are structured hierarchically. This hierarchy is represented as a tree (NetworkX MultiDiGraph). The tree is built from the data_objects_hierarchy and the data_objects_table attributes. The tree is used to navigate the dataset and access the data files.</p> <p>There are two types of Data Object trees:</p>"},{"location":"dataset_structure/#minimal-data-object-tree","title":"Minimal Data Object Tree","text":"<p><pre><code>dataset.dataset_tree\n</code></pre> The minimal Data Object tree is the smallest tree that can be built from the data_objects_hierarchy by minimizing the number of nodes. It's built by connecting the Data Objects in the data_objects_hierarchy in the order they are listed. Using the first Data Object example above, the tree would contain a total of four nodes, two Locations and two Species. The tree would look like this:</p> <p></p> <p>This tree is meant to be more visually understandable as the number of Data Objects grows, as there will not be any redundancy in the number of nodes. </p>"},{"location":"dataset_structure/#expanded-data-object-tree","title":"Expanded Data Object Tree","text":"<p><pre><code>dataset.expanded_dataset_tree\n</code></pre> The minimal tree also provides the template to create the expanded tree. The expanded tree contains unique nodes for each unique Data Object ancestry. This allows the Data Object nodes to be iterated over, to process every Data Object in a data processing pipeline.</p> <p>For example, the expanded tree for the first Data Object example would look like this:</p> <p></p> <p>This tree is used to iterate over every unique Data Object ancestry in the dataset.</p>"},{"location":"example/","title":"Minimal Example Project Structure","text":""},{"location":"example/#example-directory-structure","title":"Example directory structure","text":"<p>A small dataset consisting of .txt files, where each file contains data for one trial of one subject, could be structured as follows: <pre><code>/Users/my_username/my_dataset/\n\u251c\u2500\u2500 Subject1/\n\u2502   \u251c\u2500\u2500 Trial1.txt\n\u2502   \u251c\u2500\u2500 Trial2.txt\n\u251c\u2500\u2500 Subject2/\n\u2502   \u251c\u2500\u2500 Trial1.txt\n\u2502   \u251c\u2500\u2500 Trial2.txt\n</code></pre></p>"},{"location":"example/#example-csv-file","title":"Example CSV file","text":"<p>This is the contents of the data_objects_table file corresponding to the above directory structure: <pre><code># /Users/my_username/my_dataset/data_objects_table.csv\n| Subject Name | Trial Name |\n| ------------ | ---------  |\n|   Subject1   |   Trial1   |\n|   Subject1   |   Trial2   |\n|   Subject2   |   Trial1   |\n|   Subject2   |   Trial2   |\n</code></pre></p>"},{"location":"example/#example-configuration-file","title":"Example configuration file","text":"<p>This is the configuration file that would be used to build this dataset. <pre><code># /Users/username/dataset.toml\ndata_folder_path = \"/Users/my_username/my_dataset/\"\ndata_objects_hierarchy = [\n    { \"Subject Name\" = \"Subject\"},\n    { \"Trial Name\" = \"Trial\"},\n]\ndata_objects_file_paths = \"Subject/Trial\"\ndata_objects_table_path = \"data_objects_table.csv\"\nnum_header_rows = 1\n</code></pre></p>"},{"location":"usage/","title":"Usage","text":"<p>This package is not really intended for use as a command line package, as it serves primarily to prepare a dataset for use by other packages. The below Python commands are the intended way to interact with this package.</p>"},{"location":"usage/#build-a-dataset","title":"Build a Dataset","text":"<pre><code>from dataset_builder import Dataset\n\ndataset_config_path = \"path/to/dataset.toml\"\ndataset = Dataset.build(dataset_config_path)\n</code></pre>"},{"location":"usage/#data-object-ancestry","title":"Data Object Ancestry","text":"<p>To print the ancestry of each data object in the dataset. <pre><code>from dataset_builder import Dataset\n\ndataset_config_path = \"path/to/dataset.toml\"\ndataset = Dataset.build(dataset_config_path)\n\nfor data_object in dataset.data_objects:\n    print(data_object.ancestry)\n</code></pre></p>"},{"location":"usage/#get-data-object-from-ancestry","title":"Get Data Object from Ancestry","text":"<p>To get a data object from its ancestry. <pre><code>from dataset_builder import Dataset\n\ndataset_config_path = \"path/to/dataset.toml\"\ndataset = Dataset.build(dataset_config_path)\n\nancestry_dict = {\n    \"Subject\": \"subject1\",\n    \"Trial\": \"trial1\",\n}\ndata_object = dataset.get_data_object(ancestry_dict)\n</code></pre></p>"},{"location":"usage/#resolve-data-object-file-path","title":"Resolve Data Object File Path","text":"<p>To print the resolved (actual) file path of each data object in the dataset. <pre><code>from dataset_builder import Dataset\n\ndataset_config_path = \"path/to/dataset.toml\"\ndataset = Dataset.build(dataset_config_path)\n\nfor data_object in dataset.data_objects:\n    print(dataset.resolve_file_path(data_object))\n</code></pre></p>"},{"location":"usage/#digraph-to-nested-dict","title":"DiGraph to Nested Dict","text":"<pre><code>from dataset_builder import Dataset, convert_digraph_to_dict\n\ndataset_config_path = \"path/to/dataset.toml\"\ndataset = Dataset.build(dataset_config_path)\n\ndag_dict = dataset.convert_digraph_to_dict()\n</code></pre>"},{"location":"usage/#nested-dict-to-digraph","title":"Nested Dict to DiGraph","text":"<pre><code>from dataset_builder import Dataset, convert_dict_to_digraph\n\ndataset_config_path = \"path/to/dataset.toml\"\ndataset = Dataset.build(dataset_config_path)\n\ndag_dict = dataset.convert_digraph_to_dict()\ndag = dataset.convert_dict_to_digraph(dag_dict)\n</code></pre>"}]}